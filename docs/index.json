[{"content":" 基于Turtlebot3机器人进行一些仿真学习，主要是针对DRL方向，基于开源项目进行。\nTurtlebot3安装 在此已经默认已经安装好了ROS等相关内容，只需要安装Turtlebot3的相关依赖\nsudo apt install ros-melodic-desktop-full ros-melodic-joy ros-melodic-teleop-twist-joy ros-melodic-teleop-twist-keyboard ros-melodic-laser-proc ros-melodic-rgbd-launch ros-melodic-depthimage-to-laserscan ros-melodic-rosserial-arduino ros-melodic-rosserial-python ros-melodic-rosserial-server ros-melodic-rosserial-client ros-melodic-rosserial-msgs ros-melodic-amcl ros-melodic-map-server ros-melodic-move-base ros-melodic-urdf ros-melodic-xacro ros-melodic-compressed-image-transport ros-melodic-rqt-image-view ros-melodic-gmapping ros-melodic-navigation ros-melodic-interactive-markers ros-melodic-turtlebot3-gazebo 创建需要的工作空间，此处命名为catkin_ws\nmkdir -p catkin_ws/src cd ~/catkin_ws/src/ # 克隆相关的包 git clone https://github.com/ROBOTIS-GIT/turtlebot3.git git clone https://github.com/ROBOTIS-GIT/turtlebot3_msgs.git git clone https://github.com/ROBOTIS-GIT/turtlebot3_simulations.git cd ~/catkin_ws # 编译 catkin_make 设置相关的环境，将setup.bash文件写入.bashrc中，并添加Turtlebot3的模型(提供两种方式供选择)\n# First sudo gedit .bashrc # 添加和修改内容 source ~/catkin_ws/devel/setup.bash export TURTLEBOT3_MODEL = burger # 关闭.bashrc source .bashrc # Second echo \u0026#34;source ~/catkin_ws/devel/setup.bash\u0026#34; \u0026gt;\u0026gt; ~/.bashrc echo \u0026#34;export TURTLEBOT3_MODEL = burger\u0026#34; \u0026gt;\u0026gt; ~/.bashrc source .bashrc 测试Turtlebot3是否安装成功（仿真测试）\n启动Gazebo仿真环境\nroslaunch turtlebot3_gazebo turtlebot3_world.launch 如出现如下错误：\n**解决如下：**在config.yaml文件中将servers下的url修改为https://api.ignitionrobotics.org，注意对齐。修改后保存，重启命令即可成功启动Gazebo。\nsudo gedit ~/.ignition/fuel/config.yaml 启动SLAM\nroslaunch turtlebot3_slam turtlebot3_slam.launch slam_methods:=gmapping 键盘控制\nroslaunch turtlebot3_teleop turtlebot3_teleop_key.launch 注：如果出现没有**“rospkg”*则运行pip install rospkg即可。现在可以正常操作机器人进行建图。\n地图保存\nrosrun map_server map_saver -f ~/map/map_name 导航\n关闭以上所有终端，重新启动Gazebo环境，并运行导航节点：\nroslaunch turtlebot3_navigation turtlebot3_navigation.launch map_file:=~/map/map_name.yaml 可以使用Rviz中的2D POSE Estimate进行初始的位置估计，等到位姿估计准确后，便可以用2D Nav Goal设置目标点的位姿，进行导航功能测试。 此时会根据起始位姿和终点位姿生成一条全局路径，也会在Turtlebot3的周围一定范围内进行局部路径规划，如上图所示。\nDRL环境搭建 系统为Ubuntu18.04，采用melodic的ros版本，当前版本支持Python2.7（到ubuntu20.04-neotic就支持Python3），而涉及到强化学习、深度学习部分大都以python3为主，因此要解决ros中关于两个不同版本的使用问题。(目前已采用Ubuntu20.04)\n方法一：建立基于python2.7的pytorch环境 首先创建虚拟环境，并完成初始化\nconda create -n turtlebot3 python=2.7 conda activate turtlebot3 conda install numpy # 检测python版本 python --version 安装ROS需要的包\npip install catkin-tools pip install rospkg 安装Pytorch，详细参考官网，Python版本比较低，这个Pytorch可以使用\npip install torch==1.4.0+cu92 torchvision==0.5.0+cu92 -f https://download.pytorch.org/whl/torch_stable.html 测试Pytorch环境是否成功：\n# 进入python python torch.cuda.is_available() # 查看返回值 是否为 True 根据错误信息进行补充安装 # 如下错误 根据错误修改即可 pip install future Turtlebot3 with DDPG Code：[Github]\n在catkin_ws/src下下载所需要的功能包，并进行重新编译，最后用VScode打开\ncd ~/catkin_ws/src/ # 克隆相关的包 git clone https://github.com/dovanhuong/project.git cd ~/catkin_ws # 编译 catkin_make # VScode code . 修改Turtlebot3参数：\n# 修改turtlebot3/turtlebot3_description/urdf/turtlebot3_burger.gazebo.xacro sudo gedit turtlebot3_burger.gazebo.xacro # 内容修改如下 # 激光雷达可视化 \u0026lt;xacro:arg name=\u0026#34;laser_visual\u0026#34; default=\u0026#34;false\u0026#34;/\u0026gt; # Visualization of LDS. If you want to see LDS, set to `true` # 采样的数量 \u0026lt;scan\u0026gt; \u0026lt;horizontal\u0026gt; \u0026lt;samples\u0026gt;360\u0026lt;/samples\u0026gt; # The number of sample. Modify it to 10 \u0026lt;resolution\u0026gt;1\u0026lt;/resolution\u0026gt; \u0026lt;min_angle\u0026gt;0.0\u0026lt;/min_angle\u0026gt; \u0026lt;max_angle\u0026gt;6.28319\u0026lt;/max_angle\u0026gt; \u0026lt;/horizontal\u0026gt; \u0026lt;/scan\u0026gt; 指定Python2.7编译运行ddpg_stage_1.py，在该文件开头加入如下代码\n#! /usr/bin/env python2.7 启动仿真环境，以stage_1为例\nroslaunch project ddpg_stage_{number_of_stage}.launch ddpg_stage_1\n启动DDPG算法\nroslaunch project ddpg_stage_{number_of_stage}.launch 第一次可能会出现错误，可以根据错误对相关的库进行安装即可，比如\npip install pyyaml 最终运行效果如下： ddpg_stage_1\nddpg_stage_3\nddpg_stage_4\n以上都是训练的过程，训练结果与多方因素相关，需要深入研究代码和DDPG原理，后续根据需要进行修改。\nAnaconda技巧 并不是每次都需要虚拟环境的，并且每次激活环境都需要输入对应命令，麻烦不够简单，为此提前在.bashrc中加入相应的alias命令。这样只需要在终端中输入starte即可激活anaconda虚拟环境，输入turtlebot即可进入turtlebot的虚拟环境中。\nsudo gedit .bashrc alias turtlebot=\u0026#39;source activate turtlebot\u0026#39; alias close_env=\u0026#39;conda deactivate\u0026#39; # 需要注释前面关于conda initialize的内容 alias starte=\u0026#39;source ~/anaconda3/bin/activate\u0026#39; Reference Ubuntu18.04安装ROS Melodic+turtlebot3仿真配置 Python2.7与Python3版本兼容 ","permalink":"https://qinhua99.github.io/posts/turtlebot3-with-drl/","summary":"搭建基于Turtlebot3的DRL仿真环境","title":"Turtlebot3 With DRL"},{"content":"Hugo下载与安装1 到Github下载Hugo的二进制文件，解压到合适位置。 在电脑中添加环境变量。 “环境变量”-“Path”-\u0026ldquo;编辑环境变量\u0026rdquo;-“新建”-“D:\\Application\\hugo”，确定即可 验证其是否安装成功，在终端中输入hugo serson，出现版本号即可 注：下载安装的方法并不唯一，比如通过包管理器（如 Homebrew 或 Chocolatey）安装的 Hugo也是可以的 创建GitHub-Blog仓库 在Github创建新的仓库，仓库名称为用户名.github.io，也可添加README file，创建后可克隆到本地。\nHugo_Blog创建 创建Hugo网站，并进入网站目录 hugo new site blog_name cd blog_name 站点目录结构如下： hugo.yaml(hugo.toml)：Hugo 的配置文件，其中包含你可以设置和自定义的站点配置选项。(原本为hugo.toml，可以改为hugo.yaml格式的，方便编辑) content/：该目录通常包含你的站点的内容，如文章、页面和资源文件。你可以根据自己的需要在此目录下创建子目录和文件。 data/：该目录用于存放数据文件，你可以在 Hugo 模板中使用这些数据文件来生成动态内容。 archetypes/：该目录包含用于创建新内容的模板文件。当你使用 hugo new 命令创建新的内容时，Hugo 将基于这些模板文件生成新的文件。 layouts/：该目录包含 Hugo 网站的布局模板文件，用于定义站点的整体结构和样式 static/：该目录用于存放静态文件，如图像、CSS 和 JavaScript 文件。这些文件会直接复制到生成的网站中，而无需经过 Hugo 的处理。 themes/：如果你使用了一个或多个主题，它们将被放置在此目录下。主题包含布局文件、样式和其他资源，可以覆盖站点的默认设置。 public/（默认输出目录）：Hugo 生成的最终网站文件将存放在此目录下。该目录包含完整的 HTML 文件和其他生成的资源。(本站将输出改为了docs/) 添加主题PaperMod git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 在hugo.yaml中添加theme: PaperMod即可 本地预览，运行Hugo服务器，访问http://localhost:1313进行预览 hugo server -D hugo server -D -F --cleanDestinationDir 以上两个命令选择其一即可，--cleanDestinationDir可以清除过去的重新生产网站 创建文章 hugo new posts/Hello_world.md 使用markdown语法进行编辑即可，对于文章也可以在posts目录下直接创建或复制已写好的文章 主题配置 本站的主题配置如下，大部分的配置只需要参考官网说明或前辈们的即可\n# baseURL: \u0026#39;https://qinghuair.top\u0026#39; baseURL: \u0026#39;https://qinhua99.github.io\u0026#39; languageCode: zh-cn # languageCode: en-us title: QingHua\u0026#39;s Blog theme: PaperMod paginate: 10 # 首页每页显示的文章数 enableInlineShortcodes: true # 是否启用内联短代码解析 enableRobotsTXT: true # 是否启用或禁用自动生成 robots.txt 文件 buildDrafts: false # 用于构建并生成包括草稿（drafts）在内的所有内容 buildFuture: false # 用于构建并生成未来（future）日期的内容 buildExpired: false # 用于构建并生成过期（expired）的内容 enableEmoji: true # 启动emoji pygmentsUseClasses: true # 用于控制代码语法高亮所使用的 CSS 类 publishDir: docs # 生产目录名 minify: disableXML: true # 对 XML 文件进行最小化处理 # minifyOutput: true menu: # 导航栏 main: - identifier: archive name: 📰Posts url: /archives/ weight: 10 - identifier: categories name: 📁Categories url: /categories/ weight: 15 - identifier: about name: 👨‍🚀 url: /about/ weight: 20 - identifier: search name: 🔍 url: /search/ weight: 30 markup: # 代码高亮 goldmark: renderer: unsafe: true # HUGO 默认转义 Markdown 文件中的 HTML 代码，如需开启的话 highlight: # anchorLineNos: true codeFences: true # 代码围栏功能 guessSyntax: true # 猜测语法 lineNos: true # 行号 style: fruity outputs: home: - HTML - RSS - JSON # is necessary # 这个要在最后 params: env: production # to enable google analytics, opengraph, twitter-cards and schema. description: \u0026#34;The flow of ideas usually starts after you get started\u0026#34; # author: Hua # 设置默认主题颜色方案 auto system auto-dark auto-light dark light defaultTheme: auto # disableThemeToggle: true # 静止主题切换功能 ShowShareButtons: false # 是否显示分享按钮 ShareButtons: [\u0026#34;facebook\u0026#34;, \u0026#34;telegram\u0026#34;] # To customize which share buttons to be enabled on page ShowReadingTime: true # 是否显示阅读时间 math: true # 数学公式 # disableSpecial1stPost: true # 禁用特殊的第一篇文章样式 displayFullLangName: true # 是否显示完整的语言名称 ShowPostNavLinks: true # 是否显示文章导航链接 ShowBreadCrumbs: true # 是否显示面包屑导航 ，例如 “Home \u0026gt; Category \u0026gt; Subcategory \u0026gt; Page” ShowCodeCopyButtons: true # 是否显示代码复制按钮 ShowRssButtonInSectionTermList: false # 是否在网站的特定区块（section）和分类（term）列表中显示 RSS 订阅按钮 ShowWordCounts: true # 文章字数统计 未显示？？？ ShowToc: true # 是否显示文章的目录（Table of Contents，简称 TOC） TocOpen: true # 自动展开目录 # comments: false # images: [\u0026#34;papermod-cover.png\u0026#34;] enableInlineShortcodes : true # 启动公式 timezone: \u0026#34;Asia/Shanghai\u0026#34; # 设置时区 assets: # 网站头像 路径/static/images favicon: \u0026#34;images/favicon.ico\u0026#34; favicon16x16: \u0026#34;images/favicon-16x16.png\u0026#34; favicon32x32: \u0026#34;images/favicon-32x32.png\u0026#34; apple_touch_icon: \u0026#34;images/apple-touch-icon.png\u0026#34; safari_pinned_tab: \u0026#34;images/apple-touch-icon.png\u0026#34; disableFingerprinting: true DateFormat: \u0026#34;2006-01-02\u0026#34; # 日期格式 StartYear: 2020 # 底部开始年份 ShowLastMod: true # 显示修改时间 # 不蒜子统计 https://zhuanlan.zhihu.com/p/649952987 busuanzi: enable: false # 左上角内容 label: text: \u0026#34;🌏\u0026#34; # icon: images/apple-touch-icon.png iconHeight: 35 # 设置封面图片的隐藏属性 cover: hidden: true # 这将在结构化数据中显示封面图片，但在其他地方隐藏它 hiddenInList: true # 这将在列表页和首页上隐藏封面图片 hiddenInSingle: true # 这将在单独的页面上隐藏封面图片 # 搜索相关 fuseOpts: isCaseSensitive: false shouldSort: true location: 0 distance: 1000 threshold: 0.4 minMatchCharLength: 0 keys: [\u0026#34;title\u0026#34;, \u0026#34;permalink\u0026#34;, \u0026#34;summary\u0026#34;, \u0026#34;content\u0026#34;] # 主题配置 homeInfoParams: Title: \u0026#34;👋 Welcome Stranger!\u0026#34; Content: \u0026gt; - 深自缄默，如云漂泊 - ***Deeply silent, Drifting like a cloud*** - ***\u0026#34;立于皓月之边,不弱星光之势\u0026#34;*** socialIcons: - name: \u0026#34;Github\u0026#34; url: \u0026#34;https://github.com/QinHua99\u0026#34; - name: \u0026#34;email\u0026#34; url: \u0026#34;https://ran_qinghua@163.com\u0026#34; - name: \u0026#34;zhihu\u0026#34; url: \u0026#34;https://www.zhihu.com/people/jiu-meng-zhu-96\u0026#34; 公式问题9 按照PaperMod官方的配置后，当插入公式存在无法显示，主要由于换行。\n解决：对于换行的\\\\要使用\\\\\\来替代即可。\nx = \\begin{cases} a \u0026amp;\\text{if } b \\\\\\ c \u0026amp;\\text{if } d \\end{cases} $$ x = \\begin{cases} a \u0026amp;\\text{if } b \\\\ c \u0026amp;\\text{if } d \\end{cases} $$\n目录放在侧面2 对layouts/partials/toc.html文件代码替换如如下代码\n{{- $headers := findRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;(.|\\n])+?\u0026lt;/h[1-6]\u0026gt;\u0026#34; .Content -}} {{- $has_headers := ge (len $headers) 1 -}} {{- if $has_headers -}} \u0026lt;aside id=\u0026#34;toc-container\u0026#34; class=\u0026#34;toc-container wide\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;toc\u0026#34;\u0026gt; \u0026lt;details {{if (.Param \u0026#34;TocOpen\u0026#34;) }} open{{ end }}\u0026gt; \u0026lt;summary accesskey=\u0026#34;c\u0026#34; title=\u0026#34;(Alt + C)\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;details\u0026#34;\u0026gt;{{- i18n \u0026#34;toc\u0026#34; | default \u0026#34;Table of Contents\u0026#34; }}\u0026lt;/span\u0026gt; \u0026lt;/summary\u0026gt; \u0026lt;div class=\u0026#34;inner\u0026#34;\u0026gt; {{- $largest := 6 -}} {{- range $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{- if lt $headerLevel $largest -}} {{- $largest = $headerLevel -}} {{- end -}} {{- end -}} {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice -}} \u0026lt;ul\u0026gt; {{- range seq (sub $firstHeaderLevel $largest) -}} \u0026lt;ul\u0026gt; {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (sub (add $largest .) 1) -}} {{- end -}} {{- range $i, $header := $headers -}} {{- $headerLevel := index (findRE \u0026#34;[1-6]\u0026#34; . 1) 0 -}} {{- $headerLevel := len (seq $headerLevel) -}} {{/* get id=\u0026#34;xyz\u0026#34; */}} {{- $id := index (findRE \u0026#34;(id=\\\u0026#34;(.*?)\\\u0026#34;)\u0026#34; $header 9) 0 }} {{- /* strip id=\u0026#34;\u0026#34; to leave xyz, no way to get regex capturing groups in hugo */ -}} {{- $cleanedID := replace (replace $id \u0026#34;id=\\\u0026#34;\u0026#34; \u0026#34;\u0026#34;) \u0026#34;\\\u0026#34;\u0026#34; \u0026#34;\u0026#34; }} {{- $header := replaceRE \u0026#34;\u0026lt;h[1-6].*?\u0026gt;((.|\\n])+?)\u0026lt;/h[1-6]\u0026gt;\u0026#34; \u0026#34;$1\u0026#34; $header -}} {{- if ne $i 0 -}} {{- $prevHeaderLevel := index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub $i 1)) 1) 0 -}} {{- $prevHeaderLevel := len (seq $prevHeaderLevel) -}} {{- if gt $headerLevel $prevHeaderLevel -}} {{- range seq $prevHeaderLevel (sub $headerLevel 1) -}} \u0026lt;ul\u0026gt; {{/* the first should not be recorded */}} {{- if ne $prevHeaderLevel . -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; . -}} {{- end -}} {{- end -}} {{- else -}} \u0026lt;/li\u0026gt; {{- if lt $headerLevel $prevHeaderLevel -}} {{- range seq (sub $prevHeaderLevel 1) -1 $headerLevel -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) . -}} \u0026lt;/ul\u0026gt; {{/* manually do pop item */}} {{- $tmp := $.Scratch.Get \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Delete \u0026#34;bareul\u0026#34; -}} {{- $.Scratch.Set \u0026#34;bareul\u0026#34; slice}} {{- range seq (sub (len $tmp) 1) -}} {{- $.Scratch.Add \u0026#34;bareul\u0026#34; (index $tmp (sub . 1)) -}} {{- end -}} {{- else -}} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end -}} {{- end -}} {{- end }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- else }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;#{{- $cleanedID -}}\u0026#34; aria-label=\u0026#34;{{- $header | plainify -}}\u0026#34;\u0026gt;{{- $header | safeHTML -}}\u0026lt;/a\u0026gt; {{- end -}} {{- end -}} \u0026lt;!-- {{- $firstHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers 0) 1) 0)) -}} --\u0026gt; {{- $firstHeaderLevel := $largest }} {{- $lastHeaderLevel := len (seq (index (findRE \u0026#34;[1-6]\u0026#34; (index $headers (sub (len $headers) 1)) 1) 0)) }} \u0026lt;/li\u0026gt; {{- range seq (sub $lastHeaderLevel $firstHeaderLevel) -}} {{- if in ($.Scratch.Get \u0026#34;bareul\u0026#34;) (add . $firstHeaderLevel) }} \u0026lt;/ul\u0026gt; {{- else }} \u0026lt;/ul\u0026gt; \u0026lt;/li\u0026gt; {{- end -}} {{- end }} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/details\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/aside\u0026gt; \u0026lt;script\u0026gt; let activeElement; let elements; window.addEventListener(\u0026#39;DOMContentLoaded\u0026#39;, function (event) { checkTocPosition(); elements = document.querySelectorAll(\u0026#39;h1[id],h2[id],h3[id],h4[id],h5[id],h6[id]\u0026#39;); // Make the first header active activeElement = elements[0]; const id = encodeURI(activeElement.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); }, false); window.addEventListener(\u0026#39;resize\u0026#39;, function(event) { checkTocPosition(); }, false); window.addEventListener(\u0026#39;scroll\u0026#39;, () =\u0026gt; { // Check if there is an object in the top half of the screen or keep the last item active activeElement = Array.from(elements).find((element) =\u0026gt; { if ((getOffsetTop(element) - window.pageYOffset) \u0026gt; 0 \u0026amp;\u0026amp; (getOffsetTop(element) - window.pageYOffset) \u0026lt; window.innerHeight/2) { return element; } }) || activeElement elements.forEach(element =\u0026gt; { const id = encodeURI(element.getAttribute(\u0026#39;id\u0026#39;)).toLowerCase(); if (element === activeElement){ document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.add(\u0026#39;active\u0026#39;); } else { document.querySelector(`.inner ul li a[href=\u0026#34;#${id}\u0026#34;]`).classList.remove(\u0026#39;active\u0026#39;); } }) }, false); const main = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--article-width\u0026#39;), 10); const toc = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--toc-width\u0026#39;), 10); const gap = parseInt(getComputedStyle(document.body).getPropertyValue(\u0026#39;--gap\u0026#39;), 10); function checkTocPosition() { const width = document.body.scrollWidth; if (width - main - (toc * 2) - (gap * 4) \u0026gt; 0) { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.add(\u0026#34;wide\u0026#34;); } else { document.getElementById(\u0026#34;toc-container\u0026#34;).classList.remove(\u0026#34;wide\u0026#34;); } } function getOffsetTop(element) { if (!element.getClientRects().length) { return 0; } let rect = element.getBoundingClientRect(); let win = element.ownerDocument.defaultView; return rect.top + win.pageYOffset; } \u0026lt;/script\u0026gt; {{- end }} 修改css/extended/blank.css，添加如下代码\n:root { --nav-width: 1380px; --article-width: 650px; --toc-width: 300px; } .toc { margin: 0 2px 40px 2px; border: 1px solid var(--border); background: var(--entry); border-radius: var(--radius); padding: 0.4em; } .toc-container.wide { position: absolute; height: 100%; border-right: 1px solid var(--border); left: calc((var(--toc-width) + var(--gap)) * -1); top: calc(var(--gap) * 2); width: var(--toc-width); } .wide .toc { position: sticky; top: var(--gap); border: unset; background: unset; border-radius: unset; width: 100%; margin: 0 2px 40px 2px; } .toc details summary { cursor: zoom-in; margin-inline-start: 20px; padding: 12px 0; } .toc details[open] summary { font-weight: 500; } .toc-container.wide .toc .inner { margin: 0; } .active { font-size: 110%; font-weight: 600; } .toc ul { list-style-type: circle; } .toc .inner { margin: 0 0 0 20px; padding: 0px 15px 15px 20px; font-size: 16px; /*目录显示高度*/ max-height: 83vh; overflow-y: auto; } .toc .inner::-webkit-scrollbar-thumb { /*滚动条*/ background: var(--border); border: 7px solid var(--theme); border-radius: var(--radius); } .toc li ul { margin-inline-start: calc(var(--gap) * 0.5); list-style-type: none; } .toc li { list-style: none; font-size: 0.95rem; padding-bottom: 5px; } .toc li a:hover { color: var(--secondary); } 自定义字体和代码3,7,8 字体选择的是LXGW WenKai/霞鹜文楷，参考其网页嵌入实现。\n在layouts/partials/extend_head.html中插入HTML代码\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/style.css\u0026#34; /\u0026gt; 在assets/css/extended/blank.css中插入CCS即可，Consolas是本博客采用的字体\n/*字体*/ body { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif !important; } code { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif; } /*code*/ .post-content pre, code { font-family: \u0026#39;Consolas\u0026#39;, sans-serif; max-height: 40rem; } Fancybox 实现图片灯箱/放大功能 根据官方的教程和结合大佬8的描述得出，在layouts/partials/footer.html中加入如下代码\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/jquery@3.4.1/dist/jquery.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.css\u0026#34; /\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/gh/fancyapps/fancybox@3.5.7/dist/jquery.fancybox.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 为了方便引用图片，比如给图片居中的属性，则创建layouts/shortcodes/fancybox_figure.html，添加代码如下\n\u0026lt;figure{{ if or (.Get \u0026#34;class\u0026#34;) (eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34;) }} class=\u0026#34; {{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}align-center {{ end }} {{- with .Get \u0026#34;class\u0026#34; }}{{ . }}{{- end }}\u0026#34; {{- end -}}\u0026gt; \u0026lt;a href=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}\u0026#34; data-fancybox=\u0026#34;gallery\u0026#34;\u0026gt; \u0026lt;img loading=\u0026#34;lazy\u0026#34; src=\u0026#34;{{ .Get \u0026#34;src\u0026#34; }}{{- if eq (.Get \u0026#34;align\u0026#34;) \u0026#34;center\u0026#34; }}#center{{- end }}\u0026#34; {{- if or (.Get \u0026#34;alt\u0026#34;) (.Get \u0026#34;caption\u0026#34;) }} alt=\u0026#34;{{ with .Get \u0026#34;alt\u0026#34; }}{{ . }}{{ else }}{{ .Get \u0026#34;caption\u0026#34; | markdownify| plainify }}{{ end }}\u0026#34; {{- end -}} {{- with .Get \u0026#34;width\u0026#34; }} width=\u0026#34;{{ . }}\u0026#34;{{ end -}} {{- with .Get \u0026#34;height\u0026#34; }} height=\u0026#34;{{ . }}\u0026#34;{{ end -}} /\u0026gt; \u0026lt;/a\u0026gt; {{- if or (or (.Get \u0026#34;title\u0026#34;) (.Get \u0026#34;caption\u0026#34;)) (.Get \u0026#34;attr\u0026#34;) -}} \u0026lt;figcaption\u0026gt; {{ with (.Get \u0026#34;title\u0026#34;) -}} {{ . }} {{- end -}} {{- if or (.Get \u0026#34;caption\u0026#34;) (.Get \u0026#34;attr\u0026#34;) -}}\u0026lt;p\u0026gt; {{- .Get \u0026#34;caption\u0026#34; | markdownify -}} {{- with .Get \u0026#34;attrlink\u0026#34; }} \u0026lt;a href=\u0026#34;{{ . }}\u0026#34;\u0026gt; {{- end -}} {{- .Get \u0026#34;attr\u0026#34; | markdownify -}} {{- if .Get \u0026#34;attrlink\u0026#34; }}\u0026lt;/a\u0026gt;{{ end }}\u0026lt;/p\u0026gt; {{- end }} \u0026lt;/figcaption\u0026gt; {{- end }} \u0026lt;/figure\u0026gt; 引用：center居中（可选），caption：描述，src：图片 示例\n部署到Github 将配置的blog文件夹下的内容复制到Github站点文件下（见创建GitHub-Blog仓库），运行如下代码进行上传，期间需要输入Github的用户信息，也可以直接配置ssh key\nhugo -F --cleanDestinationDir git add . git commit -m \u0026#34;update %date% %time%\u0026#34; git push origin main 最后在Github对应仓库下，点击Settings-Pages配置即可，本站生产的在/docs下，关于网站生产内容也可以单独开分支上传，方式很多 Github-Pages\nReference 1. 零成本搭建个人博客：hugo安装\n2. [置顶] hugo博客搭建 | PaperMod主题 | Sulv\u0026rsquo;s Blog\n3. Hugo + PaperMod搭建技术博客 | Kyrie\n4. PaperMod主题配置|🚀 田少晗的个人博客\n5. Hello Hugo | 仙羡小站\n6. 折腾 Hugo \u0026amp; PaperMod 主题 | Dvel\u0026rsquo;s Blog\n7. Hugo使用自定义字体-晓寒轻\n8. Hugo 博客自定义优化ANY_ME | ANY_ME\n9. 在Hugo PaperMod主题中加入数学支持的最简方式\n","permalink":"https://qinhua99.github.io/posts/hugo-papermod%E7%AB%99%E7%82%B9/","summary":"Hugo-PaperMod博客搭建过程记录","title":"Hugo-Papermod站点"},{"content":" 光阴者，为百代之过客也，唯有奋斗奔跑者，方能生风起时。\n——刘梦章《新国辩》希望在这个美好的新时代你们都能摆脱戾气，不忘勇气 去成为你想成为的闪闪发光的大人们 祝所有男孩女孩们良辰美景，有友同行，荡尽不平，理想长鸣\naaa NEU DRL ","permalink":"https://qinhua99.github.io/about/","summary":"about","title":"👨‍🚀"}]