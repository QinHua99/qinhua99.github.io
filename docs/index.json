[{"content":"Hugo下载与安装 到Github下载Hugo的二进制文件，解压到合适位置。 在电脑中添加环境变量。“环境变量”-“Path”-\u0026ldquo;编辑环境变量\u0026rdquo;-“新建”-“D:\\Application\\hugo”，确定即可 验证其是否安装成功，在终端中输入hugo serson，出现版本号即可 注：下载安装的方法并不唯一，比如通过包管理器（如 Homebrew 或 Chocolatey）安装的 Hugo也是可以的 创建GitHub-Blog仓库 在Github创建新的仓库，仓库名称为用户名.github.io，也可添加README file，创建后可克隆到本地。\nHugo_Blog创建 创建Hugo网站，并进入网站目录 1 2 hugo new site blog_name cd blog_name 站点目录结构如下： hugo.yaml(hugo.toml)：Hugo 的配置文件，其中包含你可以设置和自定义的站点配置选项。(原本为hugo.toml，可以改为hugo.yaml格式的，方便编辑) content/：该目录通常包含你的站点的内容，如文章、页面和资源文件。你可以根据自己的需要在此目录下创建子目录和文件。 data/：该目录用于存放数据文件，你可以在 Hugo 模板中使用这些数据文件来生成动态内容。 archetypes/：该目录包含用于创建新内容的模板文件。当你使用 hugo new 命令创建新的内容时，Hugo 将基于这些模板文件生成新的文件。 layouts/：该目录包含 Hugo 网站的布局模板文件，用于定义站点的整体结构和样式 static/：该目录用于存放静态文件，如图像、CSS 和 JavaScript 文件。这些文件会直接复制到生成的网站中，而无需经过 Hugo 的处理。 themes/：如果你使用了一个或多个主题，它们将被放置在此目录下。主题包含布局文件、样式和其他资源，可以覆盖站点的默认设置。 public/（默认输出目录）：Hugo 生成的最终网站文件将存放在此目录下。该目录包含完整的 HTML 文件和其他生成的资源。(本站将输出改为了docs/) 添加主题PaperMod 1 2 git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 在hugo.yaml中添加theme: PaperMod即可 本地预览，运行Hugo服务器，访问http://localhost:1313进行预览 1 2 hugo server -D hugo server -D -F --cleanDestinationDir 以上两个命令选择其一即可，--cleanDestinationDir可以清除过去的重新生产网站 创建文章 1 hugo new posts/Hello_world.md 使用markdown语法进行编辑即可，对于文章也可以在posts目录下直接创建或复制已写好的文章 主题配置 自定义字体和代码 字体选择的是LXGW WenKai/霞鹜文楷，参考其网页嵌入实现1,2，在layouts/partials/extend_head.html中插入HTML代码\n1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/style.css\u0026#34; /\u0026gt; 在assets/css/extended/blank.css中插入CCS即可，Consolas是本博客采用的字体\n1 2 3 4 5 6 7 8 9 10 11 12 13 /*字体*/ body { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif !important; } code { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif; } /*code*/ .post-content pre, code { font-family: \u0026#39;Consolas\u0026#39;, sans-serif; max-height: 40rem; } Reference ","permalink":"https://qinhua99.github.io/posts/hugo-papermod%E7%AB%99%E7%82%B9/","summary":"Hugo下载与安装 到Github下载Hugo的二进制文件，解压到合适位置。 在电脑中添加环境变量。“环境变量”-“Path”-\u0026ldquo;编辑环境变量\u0026rdquo;-“新建”-“D:\\Application\\hugo”，确定即可 验证其是否安装成功，在终端中输入hugo serson，出现版本号即可 注：下载安装的方法并不唯一，比如通过包管理器（如 Homebrew 或 Chocolatey）安装的 Hugo也是可以的 创建GitHub-Blog仓库 在Github创建新的仓库，仓库名称为用户名.github.io，也可添加README file，创建后可克隆到本地。\nHugo_Blog创建 创建Hugo网站，并进入网站目录 1 2 hugo new site blog_name cd blog_name 站点目录结构如下： hugo.yaml(hugo.toml)：Hugo 的配置文件，其中包含你可以设置和自定义的站点配置选项。(原本为hugo.toml，可以改为hugo.yaml格式的，方便编辑) content/：该目录通常包含你的站点的内容，如文章、页面和资源文件。你可以根据自己的需要在此目录下创建子目录和文件。 data/：该目录用于存放数据文件，你可以在 Hugo 模板中使用这些数据文件来生成动态内容。 archetypes/：该目录包含用于创建新内容的模板文件。当你使用 hugo new 命令创建新的内容时，Hugo 将基于这些模板文件生成新的文件。 layouts/：该目录包含 Hugo 网站的布局模板文件，用于定义站点的整体结构和样式 static/：该目录用于存放静态文件，如图像、CSS 和 JavaScript 文件。这些文件会直接复制到生成的网站中，而无需经过 Hugo 的处理。 themes/：如果你使用了一个或多个主题，它们将被放置在此目录下。主题包含布局文件、样式和其他资源，可以覆盖站点的默认设置。 public/（默认输出目录）：Hugo 生成的最终网站文件将存放在此目录下。该目录包含完整的 HTML 文件和其他生成的资源。(本站将输出改为了docs/) 添加主题PaperMod 1 2 git init git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod 在hugo.yaml中添加theme: PaperMod即可 本地预览，运行Hugo服务器，访问http://localhost:1313进行预览 1 2 hugo server -D hugo server -D -F --cleanDestinationDir 以上两个命令选择其一即可，--cleanDestinationDir可以清除过去的重新生产网站 创建文章 1 hugo new posts/Hello_world.","title":"Hugo-Papermod站点"},{"content":"\r自定义字体和代码 字体选择的是LXGW WenKai/霞鹜文楷，参考其网页嵌入实现1,2，在layouts/partials/extend_head.html中插入HTML代码\n1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/style.css\u0026#34; /\u0026gt; 在assets/css/extended/blank.css中插入CCS即可，Consolas是本博客采用的字体\n1 2 3 4 5 6 7 8 9 10 11 12 13 /*字体*/ body { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif !important; } code { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif; } /*code*/ .post-content pre, code { font-family: \u0026#39;Consolas\u0026#39;, sans-serif; max-height: 40rem; } ","permalink":"https://qinhua99.github.io/posts/hugo-papermod/","summary":"\r自定义字体和代码 字体选择的是LXGW WenKai/霞鹜文楷，参考其网页嵌入实现1,2，在layouts/partials/extend_head.html中插入HTML代码\n1 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.staticfile.org/lxgw-wenkai-screen-webfont/1.6.0/style.css\u0026#34; /\u0026gt; 在assets/css/extended/blank.css中插入CCS即可，Consolas是本博客采用的字体\n1 2 3 4 5 6 7 8 9 10 11 12 13 /*字体*/ body { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif !important; } code { font-family: \u0026#34;LXGW WenKai Screen\u0026#34;, sans-serif; } /*code*/ .post-content pre, code { font-family: \u0026#39;Consolas\u0026#39;, sans-serif; max-height: 40rem; } ","title":"Hugo-Papermod"},{"content":"hajak ajdhak 在网页下方的说明内，找到主题安装的方法\n或者，直接去主题的github网址，里面的readme.md中有说明主题的下载和使用方式，两个方法都是一样的\n于是，根据主题作者提供的命令\ngit clone https://github.com/apvarun/blist-hugo-theme.git themes/blist ##获得主题 下载完成后，将 package.json 文件从 themes/showcase 文件夹复制到你的 Hugo 网站根文件夹，然后运行 npm install\n进入themes/blist/exampleSite文件夹中，复制exampleSite中的文件，替换掉Hugo网站根文件夹中的相同命名的文件\n执行命令\n","permalink":"https://qinhua99.github.io/posts/test/","summary":"hajak ajdhak 在网页下方的说明内，找到主题安装的方法\n或者，直接去主题的github网址，里面的readme.md中有说明主题的下载和使用方式，两个方法都是一样的\n于是，根据主题作者提供的命令\ngit clone https://github.com/apvarun/blist-hugo-theme.git themes/blist ##获得主题 下载完成后，将 package.json 文件从 themes/showcase 文件夹复制到你的 Hugo 网站根文件夹，然后运行 npm install\n进入themes/blist/exampleSite文件夹中，复制exampleSite中的文件，替换掉Hugo网站根文件夹中的相同命名的文件\n执行命令","title":"Test"},{"content":"summary : \u0026ldquo;立于好于\u0026rdquo;\n你好！ \u0026ldquo;IMC(Inter-Module Communication)是Neptus系统中模块之间通信的一种协议或机制。\u0026rdquo;\nIMC是一种轻量级的，消息封装式的通信协议。 IMC定义了一系列的消息类型(Message)，每个消息都包含消息头和消息体。消息头包含源、目标、时间戳等元信息，消息体为实际的数据。 通过IMC，可以实现相互模块之间的收发。 \u0026lt; !\u0026mdash;more \u0026mdash;\u0026gt; IMC支持点对点通信和发布-订阅两种模式。 IMC基于UDP通信，提供了比较高效和实时的消息传递。 Neptus系统中的控制器、控制面板、计划执行器等模块都通过IMC进行交互。新模块可以通过实现IMC来加入系统。 IMC为Neptus系统提供了一个可扩展和灵活的内部通信机制,大大减少了模块间的耦合,也方便新增模块。 1 2 3 4 5 \u0026lt;!-- neptus地址 --\u0026gt; \u0026lt;arg name=\u0026#34;neptus_addr\u0026#34; default=\u0026#34;172.22.179.105\u0026#34;/\u0026gt; \u0026lt;!-- ros端地址 --\u0026gt; \u0026lt;arg name=\u0026#34;bridge_addr\u0026#34; default=\u0026#34;172.22.49.214\u0026#34;/\u0026gt; \u0026lt;arg name=\u0026#34;bridge_port\u0026#34; default=\u0026#34;6002\u0026#34;/\u0026gt; ","permalink":"https://qinhua99.github.io/posts/hello/","summary":"summary : \u0026ldquo;立于好于\u0026rdquo;\n你好！ \u0026ldquo;IMC(Inter-Module Communication)是Neptus系统中模块之间通信的一种协议或机制。\u0026rdquo;\nIMC是一种轻量级的，消息封装式的通信协议。 IMC定义了一系列的消息类型(Message)，每个消息都包含消息头和消息体。消息头包含源、目标、时间戳等元信息，消息体为实际的数据。 通过IMC，可以实现相互模块之间的收发。 \u0026lt; !\u0026mdash;more \u0026mdash;\u0026gt; IMC支持点对点通信和发布-订阅两种模式。 IMC基于UDP通信，提供了比较高效和实时的消息传递。 Neptus系统中的控制器、控制面板、计划执行器等模块都通过IMC进行交互。新模块可以通过实现IMC来加入系统。 IMC为Neptus系统提供了一个可扩展和灵活的内部通信机制,大大减少了模块间的耦合,也方便新增模块。 1 2 3 4 5 \u0026lt;!-- neptus地址 --\u0026gt; \u0026lt;arg name=\u0026#34;neptus_addr\u0026#34; default=\u0026#34;172.22.179.105\u0026#34;/\u0026gt; \u0026lt;!-- ros端地址 --\u0026gt; \u0026lt;arg name=\u0026#34;bridge_addr\u0026#34; default=\u0026#34;172.22.49.214\u0026#34;/\u0026gt; \u0026lt;arg name=\u0026#34;bridge_port\u0026#34; default=\u0026#34;6002\u0026#34;/\u0026gt; ","title":"hello"},{"content":"你好！ \u0026ldquo;IMC(Inter-Module Communication)是Neptus系统中模块之间通信的一种协议或机制。\u0026rdquo;\nIMC是一种轻量级的，消息封装式的通信协议。 IMC定义了一系列的消息类型(Message)，每个消息都包含消息头和消息体。消息头包含源、目标、时间戳等元信息，消息体为实际的数据。 通过IMC，可以实现相互模块之间的收发。 二级标题 IMC支持点对点通信和发布-订阅两种模式。 IMC基于UDP通信，提供了比较高效和实时的消息传递。 Neptus系统中的控制器、控制面板、计划执行器等模块都通过IMC进行交互。新模块可以通过实现IMC来加入系统。 IMC为Neptus系统提供了一个可扩展和灵活的内部通信机制,大大减少了模块间的耦合,也方便新增模块。 哈哈哈 1 2 3 4 5 \u0026lt;!-- neptus地址 --\u0026gt; \u0026lt;arg name=\u0026#34;neptus_addr\u0026#34; default=\u0026#34;172.22.179.105\u0026#34;/\u0026gt; \u0026lt;!-- ros端地址 --\u0026gt; \u0026lt;arg name=\u0026#34;bridge_addr\u0026#34; default=\u0026#34;172.22.49.214\u0026#34;/\u0026gt; \u0026lt;arg name=\u0026#34;bridge_port\u0026#34; default=\u0026#34;6002\u0026#34;/\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 #include \u0026lt;iostream\u0026gt; class Solution { public: int findPeakElement(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); int idx = rand() % n; // 辅助函数，输入下标 i，返回一个二元组 (0/1, nums[i]) // 方便处理 nums[-1] 以及 nums[n] 的边界情况 auto get = [\u0026amp;](int i) -\u0026gt; pair\u0026lt;int, int\u0026gt; { if (i == -1 || i == n) { return {0, 0}; } return {1, nums[i]}; }; while (!(get(idx - 1) \u0026lt; get(idx) \u0026amp;\u0026amp; get(idx) \u0026gt; get(idx + 1))) { if (get(idx) \u0026lt; get(idx + 1)) { idx += 1; } else { idx -= 1; } } return idx; } }; hugo -F --cleanDestinationDir\nCaption #1\nCaption #1\ntest\nmath math公式$\\tilde{a}$\n$$ \\begin{matrix} a \u0026amp; b \\\\ c \u0026amp; d \\end{matrix} $$\n$$ y = \\int_{0}^{1} x^{2}dx $$ $$ \\begin{bmatrix} a\u0026amp; b \\\\ c\u0026amp;d \\end{bmatrix} $$ $$ \\def\\arraystretch{1.5} \\begin{array}{c:c:c} a \u0026amp; b \u0026amp; c \\\\ \\hline d \u0026amp; e \u0026amp; f \\\\ \\hdashline g \u0026amp; h \u0026amp; i \\end{array} $$\n","permalink":"https://qinhua99.github.io/posts/hello_blog/","summary":"立于好于","title":"Hello_Blog"},{"content":"summary : \u0026ldquo;立于好于\u0026rdquo;\n你好！ \u0026ldquo;IMC(Inter-Module Communication)是Neptus系统中模块之间通信的一种协议或机制。\u0026rdquo;\nIMC是一种轻量级的，消息封装式的通信协议。 IMC定义了一系列的消息类型(Message)，每个消息都包含消息头和消息体。消息头包含源、目标、时间戳等元信息，消息体为实际的数据。 通过IMC，可以实现相互模块之间的收发。 \u0026lt; !\u0026mdash;more \u0026mdash;\u0026gt; IMC支持点对点通信和发布-订阅两种模式。 IMC基于UDP通信，提供了比较高效和实时的消息传递。 Neptus系统中的控制器、控制面板、计划执行器等模块都通过IMC进行交互。新模块可以通过实现IMC来加入系统。 IMC为Neptus系统提供了一个可扩展和灵活的内部通信机制,大大减少了模块间的耦合,也方便新增模块。 1 2 3 4 5 \u0026lt;!-- neptus地址 --\u0026gt; \u0026lt;arg name=\u0026#34;neptus_addr\u0026#34; default=\u0026#34;172.22.179.105\u0026#34;/\u0026gt; \u0026lt;!-- ros端地址 --\u0026gt; \u0026lt;arg name=\u0026#34;bridge_addr\u0026#34; default=\u0026#34;172.22.49.214\u0026#34;/\u0026gt; \u0026lt;arg name=\u0026#34;bridge_port\u0026#34; default=\u0026#34;6002\u0026#34;/\u0026gt; ","permalink":"https://qinhua99.github.io/posts/imc%E8%AF%9D%E9%A2%98/","summary":"summary : \u0026ldquo;立于好于\u0026rdquo;\n你好！ \u0026ldquo;IMC(Inter-Module Communication)是Neptus系统中模块之间通信的一种协议或机制。\u0026rdquo;\nIMC是一种轻量级的，消息封装式的通信协议。 IMC定义了一系列的消息类型(Message)，每个消息都包含消息头和消息体。消息头包含源、目标、时间戳等元信息，消息体为实际的数据。 通过IMC，可以实现相互模块之间的收发。 \u0026lt; !\u0026mdash;more \u0026mdash;\u0026gt; IMC支持点对点通信和发布-订阅两种模式。 IMC基于UDP通信，提供了比较高效和实时的消息传递。 Neptus系统中的控制器、控制面板、计划执行器等模块都通过IMC进行交互。新模块可以通过实现IMC来加入系统。 IMC为Neptus系统提供了一个可扩展和灵活的内部通信机制,大大减少了模块间的耦合,也方便新增模块。 1 2 3 4 5 \u0026lt;!-- neptus地址 --\u0026gt; \u0026lt;arg name=\u0026#34;neptus_addr\u0026#34; default=\u0026#34;172.22.179.105\u0026#34;/\u0026gt; \u0026lt;!-- ros端地址 --\u0026gt; \u0026lt;arg name=\u0026#34;bridge_addr\u0026#34; default=\u0026#34;172.22.49.214\u0026#34;/\u0026gt; \u0026lt;arg name=\u0026#34;bridge_port\u0026#34; default=\u0026#34;6002\u0026#34;/\u0026gt; ","title":"IMC话题"},{"content":" 光阴者，为百代之过客也，唯有奋斗奔跑者，方能生风起时。\n——刘梦章《新国辩》希望在这个美好的新时代你们都能摆脱戾气，不忘勇气 去成为你想成为的闪闪发光的大人们 祝所有男孩女孩们良辰美景，有友同行，荡尽不平，理想长鸣\naaa NEU DRL ","permalink":"https://qinhua99.github.io/about/","summary":"about","title":"👨‍🚀"}]